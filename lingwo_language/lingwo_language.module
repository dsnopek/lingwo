<?php
// $Id$

/**
 * @file
 * Implements language definitons for Lingwo
 */

// get our API functions
require_once('lingwo_language.api.inc');

/**
 * Implementation of hook_perm().
 */
function lingwo_language_perm() {
  return array (
    'create Lingwo language definition',
    'delete own Lingwo language definition',
    'delete any Lingwo language definition',
    'edit own Lingwo language definition',
    'edit any Lingwo language definition',
    'assign Lingwo language defintion to language'
  );
}

/**
 * Implementation of hook_node_info().
 */
function lingwo_language_node_info() {
  $type_name = LingwoLanguage::$settings->content_type;
  $info[$type_name] = array(
    'name' => 'Language definition',
    'module' => 'lingwo_language',
    'description' => 'A language definition.',
    'has_title' => TRUE,
    'title_label' => 'Headword',
    'has_body' => FALSE,
    'locked' => FALSE,
  );
  return $info;
}

/**
 * Implementation of hook_node_type().
 */
function lingwo_language_node_type($op, $info) {
  // allow the user to rename our content type
  if ($op == 'update' && !empty($info->old_type) && $info->old_type == LingwoLanguages::$settings->content_type && $info->old_type != $info->type) {
    LingwoLanguages::$settings->content_type = $info->type;
  }
}

/**
 * Implementation of hook_access().
 */
function lingwo_language_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create Lingwo language definiton', $account);
  }

  $node = (object)$node;
  $own = ($account->uid == $node->uid);

  if ($op == 'update') {
    return user_access('edit any Lingwo language definition', $account) || 
           ($own && user_access('edit own Lingwo language definition', $account));
  }

  if ($op == 'delete') {
    return user_access('delete any Lingwo language definition', $account) || 
           ($own && user_access('delete own Lingwo language definition', $account));
  }
}

/**
 * Implementation of hook_form().
 */
function lingwo_language_form(&$node, $form_state) {
  // use the default implementation from node.module
  $form = node_content_form($node, $form_state);

  $element = array('#tree' => TRUE);

  if (!isset($node->lingwo_language)) {
    $node->lingwo_language = array();
  }

  foreach (module_implements('lingwo_language') as $module) {
    $func = $module .'_lingwo_language';
    $result = $func('form', $node->lingwo_language);
    if (isset($result) && is_array($result)) {
      $element = array_merge($element, $result);
    }
  }

  $form['lingwo_language'] = $element;

  return $form;
}

/**
 * Implementation of hook_content_extra_fields().
 */
function lingwo_language_content_extra_fields($type_name) {
  $extra = array();

  if (LingwoLanguage::$settings->content_type == $type_name) {
    $extra['lingwo_language'] = array(
      'label' => t('Language definition'),
      'description' => t('Lingwo language definition field.'),
      'weight' => 0,
    );
  }

  return $extra;
}

/**
 * Implementation of hook_load().
 */
function lingwo_language_load($node) {
  $res = db_query("SELECT name, value FROM {lingwo_language_revisions} WHERE vid = %d", $node->vid);
  $value = array();
  while ($obj = db_fetch_object($res)) {
    $value[$obj->name] = unserialize($obj->value);
  }
  return array('lingwo_language' => $value);
}

/**
 * Implementation of hook_insert().
 */
function lingwo_language_insert($node) {
  lingwo_language_update($node);
}

/**
 * Implementation of hook_update().
 */
function lingwo_language_update($node) {
  foreach ($node->lingwo_language as $name => $value) {
    db_query("REPLACE INTO {lingwo_language_revisions} (vid, nid, name, value) VALUES (%d, %d, '%s', '%s')", $node->vid, $node->nid, $name, serialize($value));
  }
}

/**
 * Implementation of hook_delete().
 */
function lingwo_language_delete($node) {
  db_query("DELETE FROM {lingwo_language_revisions} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_nodeapi().
 */
function lingwo_language_nodeapi(&$node, $op, $a3=NULL, $a4=NULL) {
  if ($op == 'delete revision') {
    db_query("DELETE FROM {lingwo_language_revisions} WHERE vid = %d", $node->vid);
  }
}

