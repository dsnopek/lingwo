<?php
// $Id$

/**
 * @file
 * Implements language definitons for Lingwo
 */

// get our API functions
require_once('lingwo_language.api.inc');

/**
 * Implementation of hook_perm().
 */
function lingwo_language_perm() {
  return array(
    'create Lingwo language definition',
    'delete own Lingwo language definition',
    'delete any normal Lingwo language definition',
    'delete official Lingwo language definition',
    'edit own Lingwo language definition',
    'edit official Lingwo language definition',
    'edit any normal Lingwo language definition',
    'assign Lingwo language defintion to language'
  );
}

/**
 * Implementation of hook_node_info().
 */
function lingwo_language_node_info() {
  $type_name = LingwoLanguage::$settings->content_type;
  $info[$type_name] = array(
    'name' => 'Language definition',
    'module' => 'lingwo_language',
    'description' => 'A language definition.',
    'has_title' => TRUE,
    'title_label' => 'Headword',
    'has_body' => FALSE,
    'locked' => FALSE,
  );
  return $info;
}

/**
 * Implementation of hook_node_type().
 */
function lingwo_language_node_type($op, $info) {
  // allow the user to rename our content type
  if ($op == 'update' && !empty($info->old_type) && $info->old_type == LingwoLanguage::$settings->content_type && $info->old_type != $info->type) {
    LingwoLanguage::$settings->content_type = $info->type;
  }
}

/**
 * Implementation of hook_access().
 */
function lingwo_language_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create Lingwo language definition', $account);
  }

  $node = (object)$node;
  $own = ($account->uid == $node->uid);
  $official = db_fetch_object(db_query("SELECT language FROM {lingwo_language} WHERE nid = %d", $node->nid))->language;
  $official = !empty($official);

  if ($op == 'update') {
    if ($official) {
      return user_access('edit official Lingwo language definition', $account);
    }
    else {
      return user_access('edit any normal Lingwo language definition', $account) || 
             ($own && user_access('edit own Lingwo language definition', $account));
    }
  }

  if ($op == 'delete') {
    if ($official) {
      return user_access('delete official Lingwo language definition', $account);
    }
    else {
      return user_access('delete any normal Lingwo language definition', $account) || 
             ($own && user_access('delete own Lingwo language definition', $account));
    }
  }
}

/**
 * Implementation of hook_form().
 */
function lingwo_language_form(&$node, $form_state) {
  // use the default implementation from node.module
  $form = node_content_form($node, $form_state);

  if (!isset($node->lingwo_language)) {
    $node->lingwo_language = array();
  }

  $element = array('#tree' => TRUE);

  if (user_access('assign Lingwo language definition to language')) {
    $languages = language_list('enabled');
    $languages = $languages[1];
    $options = array();
    foreach ($languages as $language) {
      $options[$language->language] = t($language->name);
    }

    $element['language'] = array(
      '#type' => 'select',
      '#title' => t('Language'),
      '#options' => array('' => t('none')) + $options,
      '#default_value' => $node->lingwo_language['language'],
      '#weight' => -10,
      '#description' => t('Assign this language definition to a system language.  This will cause this definition to be used by the system for everything concerning this language.'),
    );
  }

  $language = LingwoLanguage::fromNode($node);
  foreach (module_implements('lingwo_language_form') as $module) {
    $func = $module .'_lingwo_language_form';
    $result = $func($language);
    if (isset($result) && is_array($result)) {
      $element = array_merge($element, $result);
    }
  }

  $form['lingwo_language'] = $element;
  $form['#submit'][] = 'lingwo_language_form_submit';
  $form['#validate'][] = 'lingwo_language_form_validate';

  return $form;
}

function lingwo_language_form_validate($form, &$form_state) {
  $oldvalues = $form_state['values'];
  $form_state['values'] = $form_state['values']['lingwo_language'];

  foreach (module_implements('lingwo_language_form_validate') as $module) {
    $func = $module .'_lingwo_language_form_validate';
    $func($form, $form_state);
  }

  $oldvalues['lingwo_language'] = $form_state['values'];
  $form_state['values'] = $oldvalues;

  // if there are errors, we need to rewrite the $name portion
  if ($form_errors = form_get_errors()) {
    $messages = drupal_get_messages();

    form_set_error(NULL, '', TRUE);
    foreach ($form_errors as $name => $message) {
      if (!empty($name)) {
        $name = 'lingwo_language]['. $name;
      }
      form_set_error($name, $message);

      // remove from our cache of the messages
      $index = array_search($message, $messages['error']);
      unset($messages['error'][$index]);
    }

    // reset any remaining messages
    foreach ($messages as $type => $message) {
      drupal_set_message($message, $type);
    }
  }
}

function lingwo_language_form_submit($form, &$form_state) {
  $oldvalues = $form_state['values'];
  $form_state['values'] = $form_state['values']['lingwo_language'];

  foreach (module_implements('lingwo_language_form_submit') as $module) {
    $func = $module .'_lingwo_language_form_submit';
    $func($form, $form_state);
  }

  $oldvalues['lingwo_language'] = $form_state['values'];
  $form_state['values'] = $oldvalues;

  // rebuilds the node with the values on $form_state -- necessary when we aren't submitting, but
  // just modifying the form.
  _lingwo_form_to_node($form, $form_state);
}

/**
 * Implementation of hook_content_extra_fields().
 */
function lingwo_language_content_extra_fields($type_name) {
  $extra = array();

  if (LingwoLanguage::$settings->content_type == $type_name) {
    $extra['lingwo_language'] = array(
      'label' => t('Language definition'),
      'description' => t('Lingwo language definition field.'),
      'weight' => 0,
    );
  }

  return $extra;
}

/**
 * Implementation of hook_load().
 */
function lingwo_language_load($node) {
  // read all the values for this revision
  $res = db_query("SELECT name, value FROM {lingwo_language_revisions} WHERE vid = %d", $node->vid);
  $value = array();
  while ($obj = db_fetch_object($res)) {
    $value[$obj->name] = unserialize($obj->value);
  }

  // get the language it's assigned to
  $res = db_query("SELECT language FROM {lingwo_language} WHERE nid = %d", $node->nid);
  if ($obj = db_fetch_object($res)) {
    $value['language'] = $obj->language;
  }

  return array('lingwo_language' => $value);
}

/**
 * Implementation of hook_insert().
 */
function lingwo_language_insert($node) {
  lingwo_language_update($node);
}

/**
 * Implementation of hook_update().
 */
function lingwo_language_update($node) {
  $language_perms = user_access('assign Lingwo language definition to language');
  if (empty($node->lingwo_language['language']) && ($language_perms || $node->is_new)) {  
    // if the language is empty, assign it to NULL (even without permissions, on node creation,
    // we will set this value to NULL)
    db_query("REPLACE INTO {lingwo_language} (nid, language) VALUES (%d, NULL)", $node->nid);
  }
  elseif ($language_perms) {
    // update to the appropriate value (only do if we have permission)
    db_query("REPLACE INTO {lingwo_language} (nid, language) VALUES (%d, '%s')", $node->nid, $node->lingwo_language['language']);
  }

  // store everything except language as part of the revision
  $values = $node->lingwo_language;
  unset($values['language']);
  foreach ($values as $name => $value) {
    db_query("REPLACE INTO {lingwo_language_revisions} (vid, nid, name, value) VALUES (%d, %d, '%s', '%s')", $node->vid, $node->nid, $name, serialize($value));
  }

  module_invoke_all('lingwo_language_save', LingwoLanguage::fromNode($node));
}

/**
 * Implementation of hook_delete().
 */
function lingwo_language_delete($node) {
  db_query("DELETE FROM {lingwo_language_revisions} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {lingwo_language} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_nodeapi().
 */
function lingwo_language_nodeapi(&$node, $op, $a3=NULL, $a4=NULL) {
  if ($op == 'delete revision') {
    db_query("DELETE FROM {lingwo_language_revisions} WHERE vid = %d", $node->vid);
  }
}

