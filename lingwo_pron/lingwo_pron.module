<?php

/**
 * @file
 * All the hooks for the 'lingwo_pron' module.
 */

// get our API functions for dealing with pron
require_once('lingwo_pron.api.inc');
// the code for generating the bits on the node form (here for organizational purposes)
require_once('lingwo_pron.widget.inc');

/**
 * Implementation of hook_menu().
 */
function lingwo_pron_menu() {
  $items = array();

  $items['admin/settings/lingwo/pron'] = array(
    'title' => 'Pronunciation',
    'description' => 'Settings for Lingwo Pronunciation module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_pron_admin_settings_form'),
    'file' => 'lingwo_pron.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_help().
 */
function lingwo_pron_help($path, $arg) {
  switch ($path) {
    case 'admin/help#lingwo_pron':
      return '<p>' . t('Adds support for pronunciation to dictionary entries.  It allows users add several pronunciations, which each can have IPA, an audio file and a tag describing what makes this pronunciation differet.  Configure it !here.', array('!here' => l(t('here'), 'admin/settings/lingwo/pron'))) . '</p>';
    case 'admin/settings/lingwo/pron':
      return '<p>' . t('Configure the fields provided for each <em>pronunciation</em> on a dictionary entry.') . '</p>';
  }
}

/**
 * Implementation of hook_lingwo_entry_exts().
 */
function lingwo_pron_lingwo_entry_properties() {
  return array(
    'pron' => array(
      'class' => 'LingwoPron',
    ),
  );
}

/**
 * Implementation of hook_lingwo_locale_refresh().
 */
function lingwo_pron_lingwo_locale_refresh() {
  $languages = language_list();
  $languages = $languages[1];

  foreach ($languages as $language) {
    foreach (LingwoEntry::getPosOptions($language->language) as $key => $value) {
      i18nstrings_update('lingwo:field:pron_tag:option_' . $key, $value);
    }
  }
}

/**
 * Implementation of hook_lingwo_language_form().
 */
function lingwo_pron_lingwo_language_form($language) {
  $value = $language->getValue('lingwo_pron_pron_tag_allowed_values', LingwoPron::$settings->pron_tag_allowed_values);
  $form['lingwo_pron_pron_tag_allowed_values'] = array(
    '#type' => 'textarea',
    '#title' => t('Pronunciation tag list'),
    '#default_value' => $value,
    '#description' => t('A list of allowed values for the "Tag" field.  Put one part of speech on each line.  Use the pipe symbol if you want the part of speech to have an alternate display name, for example: <em>us|United States</em>.'),
  );
  return $form;
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_pron_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (LingwoEntry::$settings->content_type . '_node_form')) {
    $node = $form['#node'];
    $entry = LingwoEntry::fromNode($node);
    if (!$entry->isTranslation()) {
      // only applies to entries that are not translations
      $form['lingwo_pron'] = _lingwo_pron_widget($form, $form_state, $entry);
    }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function lingwo_pron_content_extra_fields($type_name) {
  $extra = array();

  if (LingwoEntry::$settings->content_type == $type_name) {
    $extra['lingwo_pron'] = array(
      'label' => t('Lingwo Pronunciation'),
      'description' => t('lingwo_pron module.'),
      'weight' => 1,
    );
  }

  return $extra;
}

/**
 * Implementation of hook_nodeapi().
 */
function lingwo_pron_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // only applies to entries
  if (!LingwoEntry::isEntryNode($node))
    return NULL;

  // view should happen for both sources and translations
  if ($op == 'view') {
    $node->content['lingwo_pron'] = array(
      '#value' => theme('lingwo_pron', LingwoEntry::fromNode($node)),
    );
  }

  // the rest only apply to sources
  if (_lingwo_is_translation($node))
    return NULL;

  switch ($op) {
    case 'load':
      $res = db_query("SELECT data FROM {lingwo_pron_revisions} WHERE vid = %d", $node->vid);
      if ($row = db_fetch_object($res)) {
        return array('lingwo_pron' => unserialize($row->data));
      }
      break;

    case 'insert':
    case 'update':
      $data = $node->lingwo_pron;
      // remove items that are marked for removal
      foreach ($data as $index => &$item) {
        if (!empty($item['remove'])) {
          unset($data[$index]);
        }
        else {
          unset($item['remove']);
        }
      }
      // clean-up and save audio items
      if (in_array('audio', LingwoPron::$settings->enabled_fields)) {
        foreach ($data as $index => &$item) {
          // clean-up
          unset($item['upload']);

          // make the audio file perminent
          if (!empty($item['audio'])) {
            if ($item['audio']->status == FILE_STATUS_TEMPORARY) {
              // move to the files perminent home
              if ($dest = _lingwo_pron_file_path()) {
                $dest .= '/' . $node->nid . '.' . pathinfo($item['audio']->filepath, PATHINFO_EXTENSION);
                if (file_move($item['audio'], $dest, FILE_EXISTS_RENAME)) {
                  $item['audio']->filepath = $dest;
                }
              }

              // Instead of the normal API, this gets written via drupal_write_record()
              //file_set_status($item['audio'], FILE_STATUS_PERMANENT);
              $item['audio']->status = FILE_STATUS_PERMANENT;

              // now write it!
              drupal_write_record('files', $item['audio'], 'fid');
            }
          }
        }
      }

      $object = (object)array(
        'nid'  => $node->nid,
        'vid'  => $node->vid,
        'data' => $data,
      );

      // We do this since you might have enabled lingwo_pron after using lingwo_entry for awhile
      // TODO: this is a general problem that should be handled at install!  lingwo_senses meets this problem too.
      $is_new = !db_fetch_object(db_query("SELECT vid FROM {lingwo_pron_revisions} WHERE vid = %d", $node->vid));

      if (!empty($node->revision) || $is_new) {
        drupal_write_record('lingwo_pron_revisions', $object);
      }
      else {
        drupal_write_record('lingwo_pron_revisions', $object, 'vid');
      }
      break;

    case 'delete revision':
      db_query("DELETE FROM {lingwo_pron_revisions} WHERE vid = %d", $node->vid);
      break;

    case 'delete':
      db_query("DELETE FROM {lingwo_pron_revisions} WHERE nid = %d", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function lingwo_pron_theme() {
  return array(
    'lingwo_pron' => array(
      'arguments' => array('entry' => NULL),
      'template' => 'lingwo-pron',
    ),
    'lingwo_pron_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'lingwo_pron.theme.inc',
    ),
  );
}

