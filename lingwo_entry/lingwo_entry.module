<?php
// $Id$

/**
 * @file
 * Implements hooks for Lingwo entry
 */

// get our API functions
require_once('lingwo_entry.api.inc');

/**
 * Implementation of hook_init().
 *
 * Early checking of URL requested.
 * If a entry node is refered to by "node/$node->nid", the user is
 * redirected using drupal_goto()
 *
 * This code was lifted graciously from the path_redirect module.
 */
function lingwo_entry_init() {
  if (LingwoEntry::$settings->redirect_node && LingwoEntry::$settings->lookup_path) {
    if (preg_match('/^node\/(\d+)$/', $_GET['q'], $matches)) {
      if ($entry = LingwoEntry::fromNid($matches[1])) {
        $redirect = $entry->getPath();
      }
    }

    // do the redirect if we've managed to locate a wikilink
    if ($redirect) {
      // if there's a result found, do the redirect
      unset($_REQUEST['destination']);
      drupal_goto($redirect);
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function lingwo_entry_menu() {
  $items = array();
  $items['admin/settings/lingwo'] = array(
    'title' => 'Lingwo dictionary settings',
    'description' => 'Settings for the Lingwo dictionary family of modules.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_entry_admin_settings'),
    'file' => 'lingwo_entry.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/settings/lingwo/entry'] = array(
    'title' => 'Entry',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  if ($lookup_path = LingwoEntry::$settings->lookup_path) {
    $i = count(explode('/', $lookup_path));
    $items[$lookup_path .'/%/%'] = array(
      'page callback' => 'lingwo_entry_lookup_page',
      'page arguments' => array($i, $i+1),
      'access arguments' => array('access content'),
      'file' => 'lingwo_entry.pages.inc',
      'type' => MENU_CALLBACK
    );
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function lingwo_entry_perm() {
  $perms[] = 'create Lingwo entry content';
  foreach(array('source', 'translation') as $type) {
    $perms[] = 'delete own Lingwo entry '. $type .' content';
    $perms[] = 'delete any Lingwo entry '. $type .' content';
    $perms[] = 'edit own Lingwo entry '. $type .' content';
    $perms[] = 'edit any Lingwo entry '. $type .' content';
  }
  return $perms;
}

/**
 * Implementation of hook_node_info().
 */
function lingwo_entry_node_info() {
  $type_name = LingwoEntry::$settings->content_type;
  $info[$type_name] = array(
    'name' => 'Dictionary entry',
    'module' => 'lingwo_entry',
    'description' => 'A dictionary entry.',
    'has_title' => TRUE,
    'title_label' => 'Headword',
    'has_body' => FALSE,
    'locked' => FALSE,
  );
  return $info;
}

/**
 * Implementation of hook_node_type().
 */
function lingwo_entry_node_type($op, $info) {
  // allow the user to rename our content type
  if ($op == 'update' && !empty($info->old_type) && $info->old_type == LingwoEntry::$settings->content_type && $info->old_type != $info->type) {
    LingwoEntry::$settings->content_type = $info->type;
  }
}

/**
 * Implementation of hook_access().
 */
function lingwo_entry_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create Lingwo entry content', $account);
  }

  $node = (object)$node;
  $own = ($account->uid == $node->uid);
  $type = _lingwo_is_translation($node) ? 'translation' : 'source';

  if ($op == 'update') {
    return user_access('edit any Lingwo entry '. $type .' content', $account) || 
           ($own && user_access('edit own Lingwo entry '. $type .' content', $account));
  }

  if ($op == 'delete') {
    return user_access('delete any Lingwo entry '. $type .' content', $account) || 
           ($own && user_access('delete own Lingwo entry '. $type .' content', $account));
  }
}

/**
 * Implementation of hook_form().
 */
function lingwo_entry_form(&$node, $form_state) {
  // use the default implementation from node.module
  $form = node_content_form($node, $form_state);

  // placeholder for the 'pos' element (we need to create it in hook_nodeapi() because there
  // we have access to the the 'language' element created by the locale module.
  $form['pos'] = array();

  return $form;
}

/**
 * Implementation of hook_validate().
 */
function lingwo_entry_validate($node, &$form) {
  if (!_lingwo_is_translation($node) && !isset($node->delete)) {
    $existing = LingwoEntry::key2nid($node->language, $node->pos, $node->title);

    if ($existing && $existing != $node->nid) {
      form_set_error('title', 
        t('Entry with this language, part of speech and headword combination already exists: !link',
          array('!link' => l($node->title, 'node/'. $existing))));
    }
  }
}

/**
 * Implementation of hook_load().
 */
function lingwo_entry_load($node) {
  if ($node->translation_source) {
    return array('pos' => $node->translation_source->pos);
  }

  if ($row = db_fetch_object(db_query("SELECT pos FROM {lingwo_entry_info} WHERE nid = %d", $node->nid))) {
    return array('pos' => $row->pos);
  }

  // TODO: this should really be a watchdog message because it appears to happen normally when
  // mass deleting entries.
  // TODO: does this still occur when mass deleting entries?
  watchdog('lingwo_entry', 'Unable to get pos value for this entry: !nid', array('!nid' => $nid), WATCHDOG_WARNING);
}

function _lingwo_entry_generate_hash($node) {
  return sha1(join(':', array($node->language, $node->pos, $node->title)));
}

/**
 * Implementation of hook_insert().
 */
function lingwo_entry_insert($node) {
  $entry = LingwoEntry::fromNode($node);
  $entry_hash = _lingwo_entry_generate_hash($node);

  // If its not a translation, record on the main lookup table (ensures uniqueness)
  if (!$entry->isTranslation()) {
    $object = (object)array(
      'language'   => $entry->language,
      'pos'        => $entry->pos,
      'headword'   => $entry->headword,
      'nid'        => $entry->nid,
      'entry_hash' => $entry_hash,
    );
    drupal_write_record('lingwo_entry', $object);
  }

  // record data on the info table
  $object = (object)array(
    'nid'             => $entry->nid,
    'language'        => implode('-', $entry->getLanguages()),
    'source_language' => $entry->sourceLanguage,
    'target_language' => $entry->targetLanguage,
    'pos'             => $entry->pos,
    'translation'     => $entry->isTranslation(),
    'entry_hash'      => $entry_hash,
  );
  drupal_write_record('lingwo_entry_info', $object);
}

/**
 * Implementation of hook_delete().
 */
function lingwo_entry_delete(&$node) {
  db_query("DELETE FROM {lingwo_entry_info} WHERE nid = %d", $node->nid);

  if (!_lingwo_is_translation($node)) {
    db_query("DELETE FROM {lingwo_entry} WHERE nid = %d", $node->nid);

    // delete all the translations of this node of this node as well
    $res = db_query("SELECT nid FROM {node} WHERE tnid = %d", $node->nid);
    while($obj = db_fetch_object($res)) {
      if ($obj->nid != $node->nid) {
        node_delete($obj->nid);
      }
    }
  }
}

/**
 * Implementation of hook_help().
 */
function lingwo_entry_help($path, $arg) {
  switch ($path) {
    case 'admin/help#lingwo_entry':
      $output = file_get_contents(_lingwo_project_path() .'/README.txt');
      return '<pre>'. check_plain($output) .'</pre>';
    case 'admin/settings/lingwo':
      return '<p>'. t("Lingwo allows site builders to create online dictionaries.  Here you can just the most basic settings that define a dictionary entry.  If you have more modules from the Lingwo family installed, you will see tabs for each of them here.") .'</p>';
  }
}

/**
 * Implementation of hook_service().
 */
function lingwo_entry_service() {
  return array(
    array(
      '#method' => 'lingwo_entry.search',
      '#callback' => 'lingwo_entry_search_service',
      '#access arguments' => array('access content'),
      '#file' => array('file' => 'service.inc', 'module' => 'lingwo_entry'),
      '#args' => array(
        array(
          '#name' => 'text',
          '#type' => 'string',
          '#description' => t('Text to lookup'),
        ),
        array(
          '#name' => 'options',
          '#type' => 'struct',
          '#description' => t('A struct representing search options.'),
          '#optional' => TRUE,
        ),
      ),
      '#return' => 'array',
      '#help' => t('An array of structs containing the "nid" of the entries and maybe some other things.'),
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function lingwo_entry_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => t('Lingwo Dictionary: Search block'),
      );
      return $blocks;

    case 'view':
      if ($delta == 0 && user_access('access content')) {
        require_once(dirname(__FILE__) .'/lingwo_entry.pages.inc');
        $block['subject'] = t('Search Dictionary');
        $block['content'] = drupal_get_form('lingwo_entry_search_form');
        return $block;
      }
      break; 
  }
}

/**
 * Implementation of hook_form_alter().
 */
function lingwo_entry_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == (LingwoEntry::$settings->content_type .'_node_form')) {
    $node = $form['#node'];

    // allow some fields to be set automagically for new nodes
    if (empty($node->nid)) {
      if (isset($_GET['headword'])) {
        $form['title']['#default_value'] = urldecode($_GET['headword']);
      }
      if (isset($_GET['language'])) {
        $node->language = $form['language']['#default_value'] = $_GET['language'];
      }
      if (isset($_GET['pos']) && !_lingwo_is_translation($node)) {
        $node->pos = $_GET['pos'];
      }
    }

    // modify the language element so that the node *must* have a language
    if (isset($form['language'])) {
      if ($form['language']['#type'] == 'select') {
        // remove language neutral and set language as required
        unset($form['language']['#options']['']);
        $form['language']['#required'] = TRUE;
        
        // if no language is selected, we make the first one the current language
        if (empty($form['language']['#default_value'])) {
          $options = array_keys($form['language']['#options']);
          $node->language = $form['language']['#default_value'] = $options[0];
        }
      }
      else if ($form['language']['#type'] == 'value' && empty($form['language']['#value'])) {
        $node->language = $form['language']['#value'] = language_default('language');
      }
    }
    else {
      // this will happen if not even 'locale' is enabled
      $node->language = language_default('language');
      $form['language'] = array(
        '#type' => 'value',
        '#value' => $node->language,
      );
    }

    // setup the pos select
    $form['pos'] = array(
      '#type' => 'select',
      '#title' => t('Part of Speech'),
      '#options' => LingwoEntry::getPosOptions($node->language, TRUE),
      '#default_value' => $node->pos,
      '#required' => TRUE,
    );

    // add a reload button if different languages can have different sets of POS values
    if (module_exists('lingwo_language')) {
      $form['pos'] = array(
        'pos' => $form['pos'] + array('#parents' => array('pos')),
        'pos_reload' => array(
          '#type' => 'submit',
          '#value' => t('Refresh Part of Speech list'),
          '#submit' => array('_lingwo_form_to_node'),
          '#parents' => array('_lingwo_entry','reload_pos'),
        ),
      );
    }

    // when editting a translation or existing node...
    if (isset($node->nid) || _lingwo_is_translation($node)) {
      // make title uneditable
      $form['title']['#name'] = 'title-disabled';
      $form['title']['#disabled'] = TRUE;
      $form['title-hidden'] = array(
        '#type' => 'hidden',
        '#name' => 'title',
        '#value' => $form['title']['#default_value'],
      );

      // make language uneditable
      $form['language']['#disabled'] = TRUE;

      // make the pos uneditable
      $form['pos']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function lingwo_entry_content_extra_fields($type_name) {
  $extra = array();

  if (LingwoEntry::$settings->content_type == $type_name) {
    $extra['pos'] = array(
      'label' => t('Part of Speech'),
      'description' => t('Lingwo Dictionary "Part of Speech" field.'),
      'weight' => 0,
    );
  }

  return $extra;
}

/**
 * Implementation of hook_nodeapi().
 */
function lingwo_entry_nodeapi(&$node, $op, $a3, $a4) {
  if (!LingwoEntry::isEntryNode($node))
    return NULL;

  switch ($op) {
    case 'prepare translation':
      $node->pos = $node->translation_source->pos;
      break;
    /*
    case 'presave':
      // A hackity hack that makes view integration always work!
      if (empty($node->tnid)) {
        $node->tnid = $node->nid;
      }
      break;
    */
  }
}

/**
 * Implementation of hook_locale().
 */
function lingwo_entry_locale($op = 'groups', $group = NULL) {
  switch ($op) {
    case 'groups':
      return array('lingwo' => t('Lingwo'));
    case 'info':
      $info['lingwo']['refresh callback'] = '_lingwo_locale_refresh';
      $info['lingwo']['format'] = FALSE;
      return $info;
  }
}

function _lingwo_locale_refresh() {
  module_invoke_all('lingwo_locale_refresh');
  return TRUE;
}

/**
 * Implementation of hook_lingwo_locale_refresh().
 */
function lingwo_entry_lingwo_locale_refresh() {
  $languages = language_list();
  $languages = $languages[1];

  foreach ($languages as $language) {
    foreach (LingwoEntry::getPosOptions($language->language) as $key => $value) {
      i18nstrings_update('lingwo:field:pos:option_'. $key, $value);
    }
  }
}

/**
 * Implementation of hook_lingwo_language_form().
 */
function lingwo_entry_lingwo_language_form($language) {
  $value = $language->getValue('lingwo_entry_pos_allowed_values', LingwoEntry::$settings->pos_allowed_values);
  $form['lingwo_entry_pos_allowed_values'] = array(
    '#type' => 'textarea',
    '#title' => t('Part of Speech Allowed Values'),
    '#default_value' => $value,
    '#description' => t('A list of allowed values for the "Part of Speech" field.  Put one part of speech on each line.  Use the pipe symbol if you want the part of speech to have an alternate display name, for example: <em>n|Noun</em>.'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Implementation of hook_views_api().
 */
function lingwo_entry_views_api() {
  return array(
    'api'  => 2,
    'path' => drupal_get_path('module', 'lingwo_entry'),
  );
}

/**
 * Theme preprocess functions!
 */

function lingwo_entry_preprocess_node(&$vars) {
  if ($entry = LingwoEntry::fromNode($vars['node'])) {
    // add some useful stuff for the template!
    $vars['entry'] = $entry;
    $vars['languages'] = $entry->getLanguages();
    $vars['languages_human'] = $entry->getLanguages(TRUE);
    $vars['pos'] = check_plain($entry->getPos(TRUE));

    if (module_exists('languageicons')) {
      $languages = language_list();
      $vars['languages_icons'] = array();
      foreach($vars['languages'] as $lang_name) {
        array_push($vars['languages_icons'], theme('languageicons_icon', $languages[$lang_name]));
      }
    }

    // if enabled, we'll munge the node_title to include
    $munging = LingwoEntry::$settings->node_title_munging;
    if ($munging['language'] || $munging['pos']) {
      $lang_spec_text = '['. implode(' &#8594; ', $vars['languages_human']) .']';
      if (isset($vars['languages_icons'])) {
        $lang_spec_images = implode(' &#8594; ', $vars['languages_icons']);
        // HACK: helps this work on the default node/node.tpl.php -- really the user should modify
        // the node.tpl.php in their theme, but we want a good out-of-box experience.
        $lang_spec_images = str_replace('"', "'", $lang_spec_images);
      }

      if ($munging['language']) {
        $vars['title'] = (isset($lang_spec_images) ? $lang_spec_images : $lang_spec_text) .' '. $vars['title'];
      }
      if ($munging['pos']) {
        $vars['title'] .= ' ('. $vars['pos'] .')';
      }

      // completely replace head_title if necessary
      if (isset($vars['head_title'])) {
        if ($munging['language']) {
          $head_title = $lang_spec_text .' ';
        }
        $head_title .= check_plain($vars['node']->title);
        if ($munging['pos']) {
          $head_title .= ' ('. $vars['pos'] .')';
        }

        $vars['head_title'] = implode(' | ', array($head_title, variable_get('site_name', 'Drupal')));
      }

      // let the template know that we did this nastiness!
      $vars['lingwo_entry_node_title_munging'] = TRUE;
    }
  }
}

function lingwo_entry_preprocess_page(&$vars) {
  if (!empty($vars['node'])) {
    lingwo_entry_preprocess_node($vars);
  }
}

