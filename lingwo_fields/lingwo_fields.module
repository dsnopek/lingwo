<?php

/**
 * @file
 * All the hooks for the 'lingwo_fields' module.
 */

// get our API functions for dealing with fields
require_once('lingwo_fields.api.inc');
// the code for generating the bits on the node form (here for organizational purposes)
require_once('lingwo_fields.widget.inc');

/**
 * Implementation of hook_menu().
 */
function lingwo_fields_menu() {
  $items = array();

  $items['admin/settings/lingwo/fields'] = array(
    'title' => 'Fields',
    'description' => 'Settings for Lingwo fields module.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingwo_fields_admin_settings_form'),
    'file' => 'lingwo_fields.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_help().
 */
function lingwo_fields_help($path, $arg) {
  switch ($path) {
    case 'admin/help#lingwo_fields':
      return '<p>'. t('Adds support for "fields" to dictionary entries.  It allows you to specify multiple forms of each word, for example: plural of nouns or conjugation of verbs.  Configure it !here.', array('!here' => l(t('here'), 'admin/settings/lingwo/fields'))) .'</p>';
    case 'admin/settings/lingwo/senses':
      return '<p>'. t('Configure the fields provided for each <em>part of speech</em> on a dictionary entry.') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function lingwo_fields_perm() {
  return array('edit Lingwo fields JavaScript');
}

/**
 * Implementation of hook_lingwo_entry_ext().
 */
function lingwo_fields_lingwo_entry_properties() {
  return array(
    'fields' => array(
      'class' => 'LingwoFields',
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function lingwo_fields_theme() {
  return array(
    'lingwo_fields_widget_form_wrapper' => array(
      'arguments' => array('element' => NULL),
    ),
    'lingwo_fields_widget_form' => array(
      'arguments' => array('element' => NULL),
      'pattern' => 'lingwo_fields_widget_form_',
    ),
    'lingwo_fields_formatter_default' => array(
      'arguments' => array('node' => NULL),
    ),
    'lingwo_fields_view' => array(
      'arguments' => array('element' => NULL),
      'pattern' => 'lingwo_fields_view_',
    ),
  );
}

/*
 * Implementation of hook_form_alter().
 */
function lingwo_fields_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == (LingwoEntry::$settings->content_type .'_node_form')) {
    $node = $form['#node'];
    $entry = LingwoEntry::fromNode($node);
    if (!$entry->isTranslation()) {
      // only applies to entries that are not translations
      $form['lingwo_fields'] = _lingwo_fields_widget($form, $form_state, $entry);
    }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function lingwo_fields_content_extra_fields($type_name) {
  $extra = array();

  if (LingwoEntry::$settings->content_type == $type_name) {
    $extra['lingwo_fields'] = array(
      'label' => t('Lingwo Fields'),
      'description' => t('lingwo_fields module.'),
      'weight' => 1,
    );
  }

  return $extra;
}

function _lingwo_fields_clean(&$items) {
  foreach ($items as &$item) {
    unset($item['remove']);

    if ($item['type'] == 'class') {
      $item['value'] = intval($item['value']);
    }
    $item['automatic'] = (bool)$item['automatic'];

    if (isset($item['alt'])) {
      $item['alt'] = array_filter($item['alt']);
      if (count($item['alt']) == 0) {
        unset($item['alt']);
      }
    }
  }
}


function _lingwo_fields_write_record($fields, $is_update) {
  if ($is_update) {
    drupal_write_record('lingwo_fields_revisions', $fields, 'vid');
  }
  else {
    drupal_write_record('lingwo_fields_revisions', $fields);
  }

  # update our lookup table!
  # TODO: in the future we will have many more lookup tables!
  db_query('DELETE FROM {lingwo_fields_forms} WHERE nid = %d', $fields->nid);
  foreach ($fields->data as $field) {
    if ($field['type'] == 'form') {
      $values = array($field['value']);
      if (isset($field['alt'])) {
        $values = array_merge($values, $field['alt']);
      }

      foreach ($values as $value) {
        // don't add an empty value!
        if (is_null($value) || $value == '') continue;

        $form = (object)array(
          'nid'       => $fields->nid,
          'form'      => $value,
          'form_name' => $field['name'],
        );
        drupal_write_record('lingwo_fields_forms', $form);
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function lingwo_fields_nodeapi(&$node, $op, $a3=NULL, $a4=NULL) {
  // only applies to entries
  if ($node->type != LingwoEntry::$settings->content_type)
    return NULL;

  // view should happen for both sources and translations (but only when showing a page)
  if ($op == 'view' && $a4) {
    $node->content['lingwo_fields'] = array(
      '#value' => theme('lingwo_fields_formatter_default', $node),
    );
  }

  // the rest only apply to sources
  if (_lingwo_is_translation($node))
    return NULL;

  switch ($op) {
    case 'load':
      $res = db_query("SELECT data FROM {lingwo_fields_revisions} WHERE vid = %d", $node->vid);
      $lingwo_fields = array();
      if ($row = db_fetch_object($res)) {
        if (!empty($row->data)) {
          $lingwo_fields = unserialize($row->data);
        }
      }
      return array('lingwo_fields' => $lingwo_fields);
      break;

    case 'presave':
    case 'prepare':
      if (!empty($node->lingwo_fields)) {
        _lingwo_fields_clean($node->lingwo_fields);
      }
      elseif (!isset($node->lingwo_fields) || is_null($node->lingwo_fields)) {
        $node->lingwo_fields = array();
      }
      break;

    case 'insert':
    case 'update':
      $object = (object)array(
        'nid'  => $node->nid,
        'vid'  => $node->vid,
        'data' => $node->lingwo_fields,
      );

      _lingwo_fields_write_record($object, empty($node->revision) && $op == 'update');
      break;

    case 'delete revision':
      db_query("DELETE FROM {lingwo_fields_revisions} WHERE vid = %d", $node->vid);
      break;

    case 'delete':
      db_query("DELETE FROM {lingwo_fields_revisions} WHERE nid = %d", $node->nid);
      db_query("DELETE FROM {lingwo_fields_forms}     WHERE nid = %d", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_lingwo_language_form().
 */
function lingwo_fields_lingwo_language_form($language) {
  require_once('lingwo_fields.admin.inc');
  return _lingwo_fields_lingwo_language_form($language);
}

/**
 * Implementation of hook_lingwo_language_form_validate().
 */
function lingwo_fields_lingwo_language_form_validate($form, &$form_state) {
  require_once('lingwo_fields.admin.inc');
  return _lingwo_fields_lingwo_language_form_validate($form, $form_state);
}

/**
 * Implementation of hook_lingwo_language_form_submit().
 */
function lingwo_fields_lingwo_language_form_submit($form, &$form_state) {
  require_once('lingwo_fields.admin.inc');
  return _lingwo_fields_lingwo_language_form_submit($form, $form_state);
}

/**
 * Implementation of hook_lingwo_language_save().
 */
function lingwo_fields_lingwo_language_save($language) {
  $code = $language->getValue('language', $language->getNode()->nid);
  LingwoFields::generateJavascript($code, $language);
}

